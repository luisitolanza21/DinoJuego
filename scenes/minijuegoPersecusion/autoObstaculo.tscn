[gd_scene load_steps=6 format=3 uid="uid://tx0rn48uy3po"]

[ext_resource type="Texture2D" uid="uid://x2x3tmmxwbtf" path="res://assets/autos/auto 3.png" id="1_jb8yw"]
[ext_resource type="Texture2D" uid="uid://2wup3i4wbx2h" path="res://assets/autos/auto 1.png" id="2_xfjj6"]
[ext_resource type="Texture2D" uid="uid://cw7hrqmxjb3i1" path="res://assets/autos/auto 2.png" id="3_auob7"]

[sub_resource type="GDScript" id="GDScript_cs50k"]
script/source = "class_name AutoObstaculo;
extends CharacterBody2D

@export var MAX_SPEED_REF= 650;
@export var MIN_SPEED_REF= 200;

@export var ACCELERATION = 1500;

@export var DECELERATION = 500.0;

@export var SUBIR=false;
@export var BAJAR=false;
@export var IR_ADELANTE=true;
@export var RETROCEDER=false;
@export var posicionParaDesaparecerX=-400;

@export var MAX_SPEED=randf_range(MIN_SPEED_REF, MAX_SPEED_REF);

#ALEATORIZANDO SPRITESÇ
var current_sprite: Sprite2D;
var sprite_auto_rojo: Sprite2D
var sprite_auto_verde: Sprite2D
var sprite_auto_amarillo: Sprite2D

var raycastFrontal: RayCast2D;
var raycastSuperior: RayCast2D;
var raycastInferior: RayCast2D;
var raycastFrontalSuperior: RayCast2D;
var raycastFrontalInferior: RayCast2D;


var velocity_target = Vector2.ZERO

func _ready():
	sprite_auto_rojo = $auto_rojo;
	sprite_auto_verde = $auto_verde;
	sprite_auto_amarillo=$auto_amarillo;
	
	raycastFrontal=$RayCastFrontal;
	raycastInferior=$RayCastInferior;
	raycastSuperior=$RayCastSuperior;
	raycastFrontalSuperior=$RayCastFrontalSuperior;
	raycastFrontalInferior=$RayCastFrontalInferior;
	
	
	
	
	var random_choice =  randi() % 3  # Generate a random number between 0 and 2
	if random_choice == 0:
		current_sprite = sprite_auto_verde
	if random_choice == 1:
		current_sprite = sprite_auto_amarillo;
	else:
		current_sprite = sprite_auto_rojo
	# Make sure the chosen sprite is visible
	current_sprite.visible = true

func detectarCosas(delta):
	var dirVertical=0;
	var freno=0;
	var colisionSuperior = raycastSuperior.is_colliding()
	var colisionInferior =raycastInferior.is_colliding()
	var colisionFrontalSuperior= raycastFrontalSuperior.is_colliding() 
	var colisionFrontalInferior=  raycastFrontalInferior.is_colliding() 
	var colisionFrontal = raycastFrontal.is_colliding() or raycastFrontalSuperior.is_colliding() or raycastFrontalInferior.is_colliding();
	
	var colisionMultiple = (raycastFrontal.is_colliding() and raycastFrontalSuperior.is_colliding() and raycastFrontalInferior.is_colliding());
	var colisionMultipleSuperior = (raycastFrontal.is_colliding() and raycastFrontalSuperior.is_colliding());
	var colisionMultipleInferior = (raycastFrontal.is_colliding() and raycastFrontalInferior.is_colliding());
	# Depuración de cada colisión
	#print(\"colisionFrontal:\", colisionFrontal)
	#print(\"colisionSuperior:\", colisionSuperior)
	#print(\"colisionInferior:\", colisionInferior)
	#print(\"colisionFrontalSuperior:\", colisionFrontalSuperior)
	#print(\"colisionFrontalInferior:\", colisionFrontalInferior)
# Verifica si alguna de las colisiones ocurre
	if raycastFrontal.is_colliding() or colisionMultipleInferior or colisionMultipleSuperior:
		var other_car = raycastFrontal.get_collider() if raycastFrontal.is_colliding() else null
		if other_car is AutoObstaculo:
			if other_car == null and raycastFrontalSuperior.is_colliding():
				other_car = raycastFrontalSuperior.get_collider()
			if other_car == null and raycastFrontalInferior.is_colliding():
				other_car = raycastFrontalInferior.get_collider()
			if other_car and other_car != self:
				var eleccion=randi_range(0, 2);
				if eleccion == 1:
					MAX_SPEED = other_car.MAX_SPEED;
				else:
					other_car.MAX_SPEED = MAX_SPEED;
				print(\"================ Igualando velocidad\");
			
		# print(\"MAX_SPEED enviado al auto de atrás: \", MAX_SPEED)
	#	print(\"MAX_SPEED enviado al auto de atrás: \", MAX_SPEED)
	if colisionFrontal:
		if (colisionSuperior and colisionInferior) or (colisionFrontal and colisionFrontalSuperior and colisionFrontalInferior):
			#print(\"Detección frontal, superior e inferior\")
			freno = 1
		elif colisionSuperior:
			#print(\"Detección superior\")
			freno = 1
		elif colisionInferior:
			#print(\"Detección inferior\")
			freno = 1
		elif colisionFrontalSuperior or (colisionFrontalSuperior and colisionFrontal):
			#print(\"Detección frontal y superior\")
			dirVertical = 1
		elif colisionFrontalInferior or (colisionFrontalInferior and colisionFrontal):
			#print(\"Detección frontal e inferior\")
			dirVertical = -1
		
	else:
		#print(\"Sin detección frontal\")
		dirVertical = 0
		freno = 0

	moverAutomovil(delta, -1, dirVertical, freno)

	
func moverAutomovil(delta, dirHorizontal, dirVertical, freno):
	var input_direction = dirHorizontal;
	var input_vertical = dirVertical;
	var is_braking =freno;  # Suponiendo que \"ui_accept\" es la acción de la barra espaciadora
	
	if input_vertical > 0:
		velocity.y = 10000 * delta;
		#print(\"MOviendo abajo\")
	elif input_vertical < 0:
		velocity.y = -10000 * delta;
		#print(\"Moviendo arriba\")
	else:
		velocity.y = 0  # Detener el movimiento vertical si no hay entrada
	# Aceleración horizontal
	if input_direction > 0:
		velocity_target.x = clamp(velocity_target.x + ACCELERATION * delta, 0, MAX_SPEED)
	elif input_direction < 0:
		velocity_target.x = clamp(velocity_target.x - ACCELERATION * delta, -MAX_SPEED, 0)
	else:
		# Desaceleración horizontal
		velocity_target.x = move_toward(velocity_target.x, 0, DECELERATION * delta)

	# Aceleración vertical (solo si hay movimiento horizontal)

	if is_braking:
		velocity_target.x = move_toward(velocity_target.x, 0, DECELERATION * delta * 2)  # Frenado más rápido
		velocity_target.y = move_toward(velocity_target.y, 0, DECELERATION * delta * 2)
		# Aplicamos la velocidad
		
		
	velocity.x = move_toward(velocity.x, velocity_target.x, ACCELERATION * delta)

	move_and_slide()
func destruiAuto():

	print(\"Destruido\")
	queue_free();

func _physics_process(delta):
	detectarCosas(delta);
	#Condicion para destruir auto
	if(position.x>60000):
		destruiAuto();

func _on_area_2d_body_entered(body):
	if body is AutoPolicia:
		print(\"Chocaste con un auto\")
		body.parpadear();
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_3bs7c"]
size = Vector2(107, 54)

[node name="autoMovil1" type="CharacterBody2D"]
rotation = -6.28319
script = SubResource("GDScript_cs50k")

[node name="auto_verde" type="Sprite2D" parent="."]
visible = false
position = Vector2(-0.794584, 0)
scale = Vector2(0.205621, 0.251633)
texture = ExtResource("1_jb8yw")
flip_h = true

[node name="auto_rojo" type="Sprite2D" parent="."]
visible = false
scale = Vector2(0.207317, 0.24911)
texture = ExtResource("2_xfjj6")
flip_h = true

[node name="auto_amarillo" type="Sprite2D" parent="."]
visible = false
position = Vector2(1, 1)
scale = Vector2(0.206413, 0.248476)
texture = ExtResource("3_auob7")
flip_h = true

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
position = Vector2(113, 97)
polygon = PackedVector2Array(-165, -119, -164, -79, -157, -75, -153, -75, -152, -70, -146, -66, -140, -67, -136, -73, -91, -73, -88, -68, -82, -65, -76, -67, -74, -74, -63, -74, -63, -108, -65, -108, -65, -119)

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2(-0.500019, 4)
shape = SubResource("RectangleShape2D_3bs7c")

[node name="RayCastFrontal" type="RayCast2D" parent="."]
target_position = Vector2(-181, -3.1647e-05)

[node name="RayCastInferior" type="RayCast2D" parent="."]
target_position = Vector2(0, 33)

[node name="RayCastSuperior" type="RayCast2D" parent="."]
target_position = Vector2(0, -42)

[node name="RayCastFrontalSuperior" type="RayCast2D" parent="."]
position = Vector2(-2, -23)
target_position = Vector2(-176, 0.999969)

[node name="RayCastFrontalInferior" type="RayCast2D" parent="."]
position = Vector2(-4, 33)
target_position = Vector2(-171, -7.00003)

[connection signal="body_entered" from="Area2D" to="." method="_on_area_2d_body_entered"]
